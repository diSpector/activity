// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	entities "github.com/diSpector/activity.git/pkg/activity/entities"
	mock "github.com/stretchr/testify/mock"
)

// MockActivityRepository is an autogenerated mock type for the ActivityRepository type
type MockActivityRepository struct {
	mock.Mock
}

type MockActivityRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockActivityRepository) EXPECT() *MockActivityRepository_Expecter {
	return &MockActivityRepository_Expecter{mock: &_m.Mock}
}

// Insert provides a mock function with given fields: _a0
func (_m *MockActivityRepository) Insert(_a0 *entities.Activity) (int64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.Activity) (int64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entities.Activity) int64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*entities.Activity) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockActivityRepository_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockActivityRepository_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - _a0 *entities.Activity
func (_e *MockActivityRepository_Expecter) Insert(_a0 interface{}) *MockActivityRepository_Insert_Call {
	return &MockActivityRepository_Insert_Call{Call: _e.mock.On("Insert", _a0)}
}

func (_c *MockActivityRepository_Insert_Call) Run(run func(_a0 *entities.Activity)) *MockActivityRepository_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Activity))
	})
	return _c
}

func (_c *MockActivityRepository_Insert_Call) Return(_a0 int64, _a1 error) *MockActivityRepository_Insert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockActivityRepository_Insert_Call) RunAndReturn(run func(*entities.Activity) (int64, error)) *MockActivityRepository_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// SelectAll provides a mock function with given fields:
func (_m *MockActivityRepository) SelectAll() ([]*entities.Activity, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SelectAll")
	}

	var r0 []*entities.Activity
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entities.Activity, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entities.Activity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Activity)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockActivityRepository_SelectAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectAll'
type MockActivityRepository_SelectAll_Call struct {
	*mock.Call
}

// SelectAll is a helper method to define mock.On call
func (_e *MockActivityRepository_Expecter) SelectAll() *MockActivityRepository_SelectAll_Call {
	return &MockActivityRepository_SelectAll_Call{Call: _e.mock.On("SelectAll")}
}

func (_c *MockActivityRepository_SelectAll_Call) Run(run func()) *MockActivityRepository_SelectAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockActivityRepository_SelectAll_Call) Return(_a0 []*entities.Activity, _a1 error) *MockActivityRepository_SelectAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockActivityRepository_SelectAll_Call) RunAndReturn(run func() ([]*entities.Activity, error)) *MockActivityRepository_SelectAll_Call {
	_c.Call.Return(run)
	return _c
}

// SelectByName provides a mock function with given fields: name
func (_m *MockActivityRepository) SelectByName(name string) ([]*entities.Activity, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for SelectByName")
	}

	var r0 []*entities.Activity
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*entities.Activity, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) []*entities.Activity); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Activity)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockActivityRepository_SelectByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectByName'
type MockActivityRepository_SelectByName_Call struct {
	*mock.Call
}

// SelectByName is a helper method to define mock.On call
//   - name string
func (_e *MockActivityRepository_Expecter) SelectByName(name interface{}) *MockActivityRepository_SelectByName_Call {
	return &MockActivityRepository_SelectByName_Call{Call: _e.mock.On("SelectByName", name)}
}

func (_c *MockActivityRepository_SelectByName_Call) Run(run func(name string)) *MockActivityRepository_SelectByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockActivityRepository_SelectByName_Call) Return(_a0 []*entities.Activity, _a1 error) *MockActivityRepository_SelectByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockActivityRepository_SelectByName_Call) RunAndReturn(run func(string) ([]*entities.Activity, error)) *MockActivityRepository_SelectByName_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockActivityRepository creates a new instance of MockActivityRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockActivityRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockActivityRepository {
	mock := &MockActivityRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
